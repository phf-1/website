* Context

- [[ref:c708a576-6c6c-4eea-8473-011095d9ef10][String]]
- [[ref:8bf691e8-ad28-4d68-bfd9-d3c7f1c7b348][Nothing]]
- [[ref:1296a617-c19c-4fe8-ae2a-29c294493359][Just]]
- [[ref:3c47155b-35b8-4392-932a-53d82ef6fe40][Hash]]
- [[ref:76052dc6-4124-4143-bd78-b0a1e95e3127][Maybe(X)]]
- [[ref:a32325c0-5fe5-4c3c-9378-7504416d5099][Actor]]
- [[ref:40ff9c82-fbfc-445c-8191-426e200b6dd7][Keyword]]
- [[ref:7182dc53-6af9-4cfd-bced-8a9ea862f279][Bytevector]]

* Resource
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

- Type :â‰¡ Keyword

- Id :â‰¡ String

- Resource : SubType(Actor)

- Resource#mk : Type Id (Bytevector|String) â†’ Resource

- resource :â‰¡ Resource#mk(t id v)

- resource#type() :â‰¡ t

- resource#id() :â‰¡ id

- resource#content() :â‰¡ v

* Html
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

- Html#mk : Id Bytevector â†’ Html

- Html#mk(id bv) :â‰¡ Resource#mk(:html id bv)

* Text
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

- Text#mk : Id Bytevector â†’ Text

- Text#mk(id bv) :â‰¡ Resource#mk(:text id bv)

* Jpeg
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

- Jpeg#mk : Id Bytevector â†’ Jpeg

- Jpeg#mk(id bv) :â‰¡ Resource#mk(:jpeg id bv)

* Pdf
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

- Pdf#mk : Id Bytevector â†’ Pdf

- Pdf#mk(id bv) :â‰¡ Resource#mk(:pdf id bv)

* Article
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: cd651702-bd90-4ddc-962b-2579cd51d845
:END:

- Org :â‰¡ Text

- Id :â‰¡ String

- Resources :â‰¡ List(Resource)

- Article : SubType(Actor)

- Article#mk : Boolean Id Html Org Resources â†’ Article

- art :â‰¡ Article#mk private id html org resources

- art#private?() :â‰¡ private

- art#id() :â‰¡ id

- art#html() :â‰¡ html

- art#org() :â‰¡ org

- art#resource(id) :â‰¡
  - resource âˆˆ resources âˆ§ resource#id() = id â†’ just(resource)
  - _ â†’ nothing

* Db

- Db : SubType(Actor)

- Db#mk : Set(Article) â†’ Db

- Db#mk(articles) : Db :â‰¡
  - db#article : Id â†’ Maybe(Article) :â‰¡
    - Î»id.
      - âˆƒ article âˆˆ articles âˆ§ article#id() = id â†’ just(article)
      - _ â†’ nothing

  - db

* ArticlePath
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: c57ff4ce-4499-45d1-a9fc-3ce285b30a16
:END:

An ArticlePath is a path to directory with the following structure:

#+begin_example
â€¦/(public|private)/id
â”œâ”€â”€ article.html
â”œâ”€â”€ article.org
â””â”€â”€ resource
    â”œâ”€â”€ â€¦
    â””â”€â”€ â€¦.(jpeg|html|pdf|txt)
#+end_example

* article-pathâ†’article

- article-pathâ†’article : ArticlePath â†’ Article :â‰¡ ðŸžŽ

* ContentDirectory

A ContentDirectory is a path to a directory with the following structure:

#+begin_example
./
â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ 1/
â”‚   â”œâ”€â”€ â€¦/
â”‚   â””â”€â”€ n/
â””â”€â”€ private/
    â”œâ”€â”€ x/
    â”œâ”€â”€ â€¦/
    â””â”€â”€ z/
#+end_example

where â€¦/public/1, â€¦/private/x, â€¦ : ArticlePath

* contentdirectoryâ†’articles

- contentdirectoryâ†’articles : ContentDirectory â†’ Set(Article)

* Conf
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: 6ea23d0d-78c4-468c-9998-eaa555ecdb12
:END:

- Conf : SubType(Actor)

- Conf#mk() : Conf

- Conf#value : Keyword â†’ String
- Conf#value(:ip) :â‰¡ value of the WEBSITE_IP environment variable, an IP address.
- Conf#value(:port) :â‰¡ value of the WEBSITE_PORT environment variable, a PORT number.
- Conf#value(:content) :â‰¡ value of the WEBSITE_CONTENT environment variable, a ContentDirectory
- Conf#value(:env) :â‰¡ value of the WEBSITE_ENV environment variable, "dev" | "test" | "prod"
- Conf#value(:login) :â‰¡ value of the WEBSITE_LOGIN, a String.
- Conf#value(:password) :â‰¡ value of the WEBSITE_PASSWORD, a String.

* Reply

- Response :â‰¡ https://www.gnu.org/software/guile/manual/guile.html#Responses
- Reply :â‰¡ Response Ã— Bytevector
- Reply#hello() :â‰¡ ðŸžŽ
- Reply#404() :â‰¡ ðŸžŽ

* Layout
:PROPERTIES:
:TYPE: f590edb9-5fa3-4a07-8f3d-f513950d5663
:ID: 6eec59f7-6386-4d28-a253-41c662e32339
:END:

A layout file is an HTML file with a single ~__BODY__~ string that is to be replaced by
the HTML content of an article. It completes the article content to form a complete
HTML String.

- Name :â‰¡ String

- Layout :â‰¡ SubType(Actor)

- Layout#mk : Name String â†’ Layout

- layout :â‰¡ Layout#mk name string

- layout#embed(content) :â‰¡ string with "__BODY__" placeholder replaced by content.

- layout#name() :â‰¡ name

* LayoutDirectory

A LayoutDirectory is a path to a directory with the following structure:

#+begin_example
./
â””â”€â”€ article.html
#+end_example

where article.html is file which content is a Layout.

* layoutdirâ†’layouts

- layoutdirâ†’layouts : LayoutDirectory â†’ Hash(Name Layout) :â‰¡ ðŸžŽ

* stringâ†’bytevector

- stringâ†’bytevector : String â†’ Bytevector

* Website
:PROPERTIES:
:TYPE: f590edb9-5fa3-4a07-8f3d-f513950d5663
:ID: 65e02573-e1ea-4463-95bc-46ce866426af
:END:

- index : Db â†’ Article :â‰¡
  - titles : List(String) :â‰¡ titles for each article in DB.
  - article : Article :â‰¡ article whose content is links
  - article

- htmlâ†’reply : Html â†’ HtmlReply
- htmlâ†’reply(html layout) :â‰¡
  - html
  - â–¸ Resource#content()
  - â–¸ layout#embed()
  - â–¸ stringâ†’bytevector()
  - â–¸ HtmlReply#mk()

- Website : SubType(Actor)

- Website#mk : Env Content Layout Login Password â†’ Website

- Website#mk(env content layout login password) :â‰¡
  - articles :â‰¡ contentdirectoryâ†’articles content
  - db :â‰¡ Db#mk articles
  - layouts :â‰¡ layoutdirâ†’layouts layout
  - article-layout :â‰¡ layouts("article.html")
  - index :â‰¡ index(db)

  - website#404() :â‰¡ Reply#404()

  - website#index() :â‰¡ htmlâ†’reply(index#html() article-layout)

  - website#hello() :â‰¡ Reply#hello()

  - website#article(id msg) :â‰¡
    - match db#article(id)
      - nothing â†’ website#404()
      - just(art) â†’
        - match Actor#send(art msg)
          - html : Html â†’ htmlâ†’reply(html article-layout)
          - org : Text â†’ org#content() â–¸ stringâ†’bytevector() â–¸ TextReply#mk()
          - jpeg : Jpeg â†’ jpeg#content() â–¸ JpegReply#mk()
          - pdf : Pdf â†’ pdf#content() â–¸ PdfReply#mk()
          - nothing â†’ website#404()

  - website

* ./bin/start
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: d7f8a08a-98fd-4086-af4e-dd4e2b1fa68a
:END:

- ~./bin/start~ executes the following:
  - conf :â‰¡ Conf#mk()
  - ðŸžŽ
  - Server#mk(
    -  ip
    -  port
    -  content
    -  layout
    -  env
    -  login
    -  password)

* Identity
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: a82de302-2587-483d-bf6b-bde6ff80fada
:END:

Login :â‰¡ String

Password :â‰¡ String

Identity :â‰¡ Login Ã— Password

* Protocol

Given a browser pointed at =https://domain= and =server :â‰¡ ./bin/start=, then the
following protocol is satisfied:

|---------------------------------+------------------------------------------|
| Request                         | Reply                                    |
|---------------------------------+------------------------------------------|
| GET identity /hello             | website#hello()                          |
| GET identity /article/id/html   | website#article(identity id msg(:html))  |
| GET identity /article/id/org    | website#article(identity id msg(:org))   |
| GET identity /article/id/res-id | website#resource(identity id res-id)     |
| GET identity /articles          | website#index()                          |
| GET identity /                  | website#article(identity "1" msg(:html)) |
| GET identity /id                | website#resource(identity "1" id)        |
| _                               | website#404()                            |
|---------------------------------+------------------------------------------|

* Local Variables  :noexport:
Local Variables:
eval: (add-hook 'before-save-hook #'whitespace-cleanup nil t)
indent-tabs-mode: nil
org-export-with-broken-links: t
fill-column: 85
End:
