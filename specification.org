* Context

- [[ref:c708a576-6c6c-4eea-8473-011095d9ef10][String]]
- [[ref:8bf691e8-ad28-4d68-bfd9-d3c7f1c7b348][Nothing]]
- [[ref:1296a617-c19c-4fe8-ae2a-29c294493359][Just]]
- [[ref:3c47155b-35b8-4392-932a-53d82ef6fe40][Hash]]
- [[ref:76052dc6-4124-4143-bd78-b0a1e95e3127][Maybe(X)]]
- [[ref:a32325c0-5fe5-4c3c-9378-7504416d5099][Actor]]
- [[ref:40ff9c82-fbfc-445c-8191-426e200b6dd7][Keyword]]
- [[ref:7182dc53-6af9-4cfd-bced-8a9ea862f279][Bytevector]]

* ArticlePath
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: c57ff4ce-4499-45d1-a9fc-3ce285b30a16
:END:

An ArticlePath is a path to directory with the following structure:

#+begin_example
…/(public|private)/id
├── article.html
├── article.org
└── resource
    ├── …
    └── ….(jpeg|html|pdf|txt)
#+end_example

* ContentDirectory
:PROPERTIES:
:ID:       80f470d2-cb23-4e46-9ec9-58c2253d61f9
:END:

A ContentDirectory is a path to a directory with the following structure:

#+begin_example
./
├── public/
│   ├── 1/
│   ├── …/
│   └── n/
└── private/
    ├── x/
    ├── …/
    └── z/
#+end_example

where …/public/1, …/private/x, … : ArticlePath

* Resource
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

A resource may be viewed as a Keyword × Id × Bytevector where Id :≡
String. resource#bv() is its bytevector, and so on for resource#type() and
resource#id().

* HtmlResource
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

An HtmlResource is a resource such that resource#type() = :html and its bytevector
represents a UTF8 string formatted as an HTML document.

* TextResource
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

An TextResource is a resource such that resource#type() = :text and its bytevector
represents a UTF8 string.

* JpegResource
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

An JpegResource is a resource such that resource#type() = :jpeg and its bytevector
represents a Jpeg image.

* PdfResource
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:END:

An PdfResource is a resource such that resource#type() = :pdf and its bytevector
represents a PDF file.

* Article
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: cd651702-bd90-4ddc-962b-2579cd51d845
:END:

an article :≡ Article#mk(…) represents an article. It is built from a boolean that
tells if it is private or public, an id (a string), a title (a string), an
HtmlResource, a TextResource and a set named data of resources of these types:
HtmlResource, PdfResource, TextResource, JpegResource.

article#id() is its id, article#title() its title, and so on for article#html() and
article#org() (the text resource). article#data(id) returns a resource such that
resource ∈ data and resource#id() = id if any, or nothing.

* Db
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: ff90b350-b368-4cb3-b29e-d34e8fd341a3
:END:

A db :≡ Db#mk(articles layout) where articles is a set of articles and layout a
Layout, provides db#article(id) which is an article if article ∈ articles and
article#id() = id, else nothing. In addition, db#article("index") is an article
computed from articles which represents the index of the articles. db#article("1") is
the article that serves as the landing page.

* LayoutDirectory

A LayoutDirectory is a path to a directory with the following structure:

#+begin_example
./
└── article.html
#+end_example

where article.html is file which content is a Layout.

* Layout
:PROPERTIES:
:TYPE: f590edb9-5fa3-4a07-8f3d-f513950d5663
:ID: 6eec59f7-6386-4d28-a253-41c662e32339
:END:

A layout file is an HTML file with a single ~__BODY__~ string that is to be replaced by
the HTML content of an article. It completes the article content to form a complete
HTML String. layout :≡ Layout#mk(dir) where dir is a LayoutDirectory and provides
layout#embed(str) a Bytevector where str has replaced __BODY__ in the layout string.

* Reply

A reply is a pair formed from a [[https://www.gnu.org/software/guile/manual/guile.html#Responses][Response]] and a Bytevector — /i.e./ its
content. Reply#404, Reply#hello and maybe others are predefined replies.

* Env
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: a1603b4f-a95a-4eea-9cc3-f2cc35eb68d9
:END:

An env value is either "dev", "test" or "prod".

* Verb
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: ac0f68a7-24d6-458e-92b4-68f700a1cdfb
:END:

Verb#get represents the GET verb of an HTTP request.

* Identity
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: a82de302-2587-483d-bf6b-bde6ff80fada
:END:

An identity is a pair of a login and a password, both of them strings.

* Website
:PROPERTIES:
:TYPE: f590edb9-5fa3-4a07-8f3d-f513950d5663
:END:

A Website written website :≡ Website#mk(env content layout login password) varies its
logging behaviour and performances depending on the env value. An expected identity
is built from login and password: some content are accessible only if the client
sends the correct identity. A Db db of articles and a Layout are deduced from the
ContentDirectory content and layout (a directory path) value.

website#hello() is a reply which content is just "hello". website#404() is
Reply#404. website#article(identity id :html) is a reply built from the
article#html(), provided article ∈ db and article#id() = id ; else: Reply#404. A
challenge (Basic Auth) might be replied if necessary. website#article(identity id
:org) is similar. website#index() is like website#article(nothing "index"
:html). Finally, website#resource(identity id resource-id) replies
article#data(resource-id) if any, or Reply#404.

* Conf
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: 6ea23d0d-78c4-468c-9998-eaa555ecdb12
:END:

A configuration written conf :≡ Conf#mk() is the set of values read from the
environment. All environment variables start with the WEBSITE_ prefix. The IP address
and the PORT values are read from WEBSITE_IP and WEBSITE_PORT. CONTENT value is a
ContentDirectory. ENV is an env value. LOGIN and PASSWORD are strings. conf#ip() is
the IP value, conf#port() is the PORT value and so on.

* Server
:PROPERTIES:
:TYPE: f590edb9-5fa3-4a07-8f3d-f513950d5663
:ID: 65e02573-e1ea-4463-95bc-46ce866426af
:END:

A server written server :≡ Server#mk(…) starts a Webserver and arrange so that the
request it receives are sent to a Website instance w. Assuming a reply has been
computed, it is sent back to the request author.

* ./bin/start
:PROPERTIES:
:TYPE: ca53237e-a27a-40d0-aeae-5d4bf4fd4e2f
:ID: d7f8a08a-98fd-4086-af4e-dd4e2b1fa68a
:END:

./bin/start is a unix executable that builds a Conf then a Server initialized with
the parameters deduced from the configuration.

* Protocol

Provided the current machine has executed ~./website install && ./website activate~,
then a webserver is executing, result of =./bin/start=. Given a browser pointing at
=https://domain= such that a DNS forwards requests to the current machine, then the
browser can expect the following protocol to be satisfied:

|-----------------------------+----------------------------------|
| Request                     | Reply                            |
|-----------------------------+----------------------------------|
| GET auth /hello             | website#hello()                  |
| GET auth /article/id/html   | website#article(auth id :html)   |
| GET auth /article/id/org    | website#article(auth id :org)    |
| GET auth /article/id/res-id | website#resource(auth id res-id) |
| GET auth /articles          | website#index()                  |
| GET auth /                  | website#article(auth "1" :html)  |
| GET auth /id                | website#resource(auth "1" id)    |
| _                           | website#404()                    |
|-----------------------------+----------------------------------|

GET is a Verb, auth may be an identity or nothing, website is a Website.

* Local Variables  :noexport:
Local Variables:
eval: (add-hook 'before-save-hook #'whitespace-cleanup nil t)
indent-tabs-mode: nil
org-export-with-broken-links: t
fill-column: 85
End:
